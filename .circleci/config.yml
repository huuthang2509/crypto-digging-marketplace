version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  docker-nodejs:
    docker:
      - image: circleci/node:16.13.0
  docker-python:
    docker:
      - image: circleci/python:3.8.2
  docker-aws-cli:
    docker:
      - image: amazon/aws-cli
  docker-base:
    docker:
      - image: cimg/base:2022.11-20.04
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_ACCESS_TOKEN

commands:
  destroy-infra:
    

jobs:

  build-push-fe-image:
    executor: docker-base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build frontend image
          command: |
            cd frontend
            TAG=${CIRCLECI_WORKFLOW_ID:0:3}
            docker build . -f Dockerfile -t=huuthang2509/cryto-digging-fe:$TAG
      - run:
          name: Push to Docker Hub
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_ACCESS_TOKEN
            docker push huuthang2509/cryto-digging-fe:$TAG

  build-push-be-image:
    executor: docker-base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build backend image
          command: |
            cd backend
            TAG=${CIRCLECI_WORKFLOW_ID:0:3}
            docker build . -f Dockerfile -t=huuthang2509/cryto-digging-be:$TAG
      - run:
          name: Push to Docker Hub
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_ACCESS_TOKEN
            docker push huuthang2509/cryto-digging-be:$TAG

  deploy-infrastructure:
    executor: docker-aws-cli
    steps:
      - checkout
      - run:
          name: Deploy VPC infrastructure
          command: |
            cd infrastructure
            aws cloudformation deploy \
              --template-file ./network/base_network.yml \
              --stack-name cryto-digging-network \
              --parameter-overrides file://parameters/base_network_param.conf \
              --capabilities CAPABILITY_IAM
      - run:
          name: Deploy EKS infrastructure
          command: |
            cd infrastructure
            aws cloudformation deploy \
              --template-file ./network/eks_network.yml \
              --stack-name cryto-digging-eks-network \
              --parameter-overrides file://parameters/eks_network_param.conf \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name "cryto-digging-eks-network"
            aws cloudformation deploy \
              --template-file ./eks_cluster.yml \
              --stack-name cryto-digging-eks-cluster \
              --parameter-overrides file://parameters/eks_cluster_param.conf \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name "cryto-digging-eks-cluster"
            scp -i bastion-host.pem cryto-digging-nodegroup.pem ubuntu@54.84.69.43:/home/ubuntu/
            aws cloudformation deploy \
              --template-file ./eks_nodegroup.yml \
              --stack-name cryto-digging-eks-nodegroup \
              --parameter-overrides file://parameters/eks_nodegroup_param.conf \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

  configure_infrastructure:
    executor: docker-python
    steps:
      - checkout
      - run:
          name: Configure infrastructure
          command: |
            pip install ansible
  
  backup_db:
    executor: docker-python
    steps:
      - checkout
      - run:
          name: Backup database
          command: |
            cd infrastructure
            python3 backup_db.py

  deploy_frontend:

  deploy_backend:

  smoke_test: #health check?

workflows:
  deploy:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - deploy_infrastructure:
          requires: [test_frontend, test_backend]
          filters:
            branches:
              only: master
      - configure_infrastructure:
          requires: [deploy_infrastructure]
      - backup_db
      - deploy_frontend
      - deploy_backend
      - smoke_test