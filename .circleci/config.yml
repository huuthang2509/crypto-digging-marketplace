version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  docker-nodejs:
    docker:
      - image: circleci/node:16.13.0
  docker-python:
    docker:
      - image: circleci/python:3.8.2
  docker-aws-cli:
    docker:
      - image: amazon/aws-cli
  docker-base:
    docker:
      - image: cimg/base:2022.11-20.04
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_ACCESS_TOKEN

jobs:

  build-push-fe-image:
    executor: docker-base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build frontend image
          command: |
            cd frontend
            TAG=${CIRCLECI_WORKFLOW_ID:0:3}
            docker build . -f Dockerfile -t=huuthang2509/cryto-digging-fe:$TAG
      - run:
          name: Push to Docker Hub
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_ACCESS_TOKEN
            docker push huuthang2509/cryto-digging-fe:$TAG

  build-push-be-image:
    executor: docker-base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build backend image
          command: |
            cd backend
            TAG=${CIRCLECI_WORKFLOW_ID:0:3}
            docker build . -f Dockerfile -t=huuthang2509/cryto-digging-be:$TAG
      - run:
          name: Push to Docker Hub
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_ACCESS_TOKEN
            docker push huuthang2509/cryto-digging-be:$TAG


  deploy-infrastructure:
    executor: docker-aws-cli
    steps:
      - checkout
      - run:
          name: Deploy infrastructure
          command: |
            cd infrastructure
            aws cloudformation deploy \
            --template-file network_infra.yml \
            --stack-name crypto-network \
            --capabilities CAPABILITY_IAM

  configure_infrastructure:
    executor: docker-python
    steps:
      - checkout
      - run:
          name: Configure infrastructure
          command: |
            pip install ansible
  
  backup_db:
    executor: docker-python
    steps:
      - checkout
      - run:
          name: Backup database
          command: |
            cd infrastructure
            python3 backup_db.py

  deploy_frontend:

  deploy_backend:

  smoke_test: #health check?

workflows:
  deploy:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - deploy_infrastructure:
          requires: [test_frontend, test_backend]
          filters:
            branches:
              only: master
      - configure_infrastructure:
          requires: [deploy_infrastructure]
      - backup_db
      - deploy_frontend
      - deploy_backend
      - smoke_test